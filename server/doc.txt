# Synchro-Nice Backend API Documentation

This document provides a detailed overview of the available API endpoints and data models
for the Synchro-Nice backend server. The server is built using FastAPI and processes audio files,
extracting musical features for real-time visualization.

---

## 1. Endpoints

### 1.1. `POST /upload`
- **Description:** Uploads an audio file (MP3 format only) to the server. The server stores the file temporarily, initializes a processing session, and returns a unique session ID.
- **Method:** `POST`
- **Path:** `/upload`
- **Receives:**
  - **`file`**: An `UploadFile` object containing the MP3 audio file.
- **Returns:**
  - A JSON object with the following fields:
    - **`session_id`** (`str`): A unique identifier for the processing session.
    - **`file_info`** (`dict`): A dictionary containing metadata about the uploaded file.
    - **`total_chunks`** (`int`): The total number of audio chunks that will be processed.

### 1.2. `WebSocket /ws/{session_id}`
- **Description:** A WebSocket endpoint for real-time communication during audio processing. The server streams processed audio data chunks and status updates to the client.
- **Method:** `WebSocket`
- **Path:** `/ws/{session_id}`
- **Receives:**
  - A WebSocket connection.
- **Returns:**
  - A stream of JSON messages with two types:
    - **`type: "status"`**: A message indicating the processing status and progress.
      - **`data`** (`AudioProcessingStatus`): The current status of the audio processing.
    - **`type: "chunk_data"`**: A message containing processed data for a single audio chunk.
      - **`data`** (`AudioChunkData`): The detailed musical features of a processed chunk.
    - **`type: "error"`**: An error message if an issue occurs during processing.

### 1.3. `GET /session/{session_id}/chunks`
- **Description:** Retrieves all audio chunks that have been processed for a given session. This is useful for playback controls like seeking or rewinding, allowing a client to get the data without waiting for the real-time stream.
- **Method:** `GET`
- **Path:** `/session/{session_id}/chunks`
- **Receives:**
  - **`session_id`** (`str`): The ID of the session to retrieve data for.
- **Returns:**
  - A JSON object with the following fields:
    - **`session_id`** (`str`): The requested session ID.
    - **`total_chunks`** (`int`): The total number of processed chunks stored.
    - **`chunks`** (`list`): A list of `AudioChunkData` objects.

### 1.4. `GET /audio/{session_id}`
- **Description:** Serves the original audio file that was uploaded for a specific session ID.
- **Method:** `GET`
- **Path:** `/audio/{session_id}`
- **Receives:**
  - **`session_id`** (`str`): The ID of the session.
- **Returns:**
  - The original MP3 audio file as a `FileResponse`.

---

## 2. Data Models

### 2.1. `AudioFileInfo`
- **Description:** Model representing basic metadata about an uploaded audio file.
- **Fields:**
  - **`filename`** (`str`): The original name of the uploaded file.
  - **`duration`** (`float`): The total duration of the audio in seconds.
  - **`sample_rate`** (`int`): The sampling rate of the audio in Hz.
  - **`channels`** (`int`): The number of audio channels (e.g., 1 for mono, 2 for stereo).
  - **`file_path`** (`str`): The temporary path where the file is stored on the server.

### 2.2. `AudioProcessingStatus`
- **Description:** Model for reporting the current status of the audio processing session.
- **Fields:**
  - **`status`** (`Literal["ready", "processing", "completed"]`): The current state of the processing.
  - **`progress`** (`float`): The processing progress, ranging from 0.0 to 1.0.
  - **`total_chunks`** (`int`): The total number of chunks to be processed.
  - **`processed_chunks`** (`int`): The number of chunks processed so far.
  - **`duration`** (`float`): The total duration of the audio in seconds.

### 2.3. `AudioChunkData`
- **Description:** Model for a single chunk of processed audio data, containing all extracted musical features. This is the core data model for visualization.
- **Fields:**
  - **`timestamp`** (`float`): The start time of the chunk in seconds.
  - **`frequencies`** (`list[float]`): A list of 20 normalized frequency band energies (0.0 to 1.0).
  - **`amplitude`** (`float`): The overall volume/energy of the chunk (0.0 to 1.0).
  - **`brightness`** (`float`): The spectral centroid, indicating the "brightness" of the sound.
  - **`energy_center`** (`float`): The spectral rolloff, indicating where the bulk of the energy is concentrated.
  - **`is_percussive`** (`bool`): `True` if a percussive onset was detected in the chunk.
  - **`rolloff`** (`float`): Alias for `energy_center` but with the raw value.
  - **`zero_crossing_rate`** (`float`): The rate at which the signal changes sign, useful for distinguishing tones from noise.
  - **`spectral_flatness`** (`float`): A measure of how "noisy" the spectrum is (0.0 for pure tones, 1.0 for noise).
  - **`chroma_features`** (`list[float]`): A list of 12 values representing the energy of each of the 12 chroma pitches (C, C#, D, etc.).
  - **`beat_strength`** (`float`): A measure of the strength of a beat in the current chunk.
  - **`tempo`** (`float`): The estimated tempo in Beats Per Minute (BPM) for the chunk.

```